import os

# www.scons.org scritp files for COSMO computations using both MOPAC and GAMESS

# Use "nohup" to run from ssh and keep running after logout

# Configuration
molfiles = '../molfiles'
#molfiles = '../molbig'
variant = 'RM1'
#variant = 'RM1_1.18'
# variant = 'POA1'

# the tmp directory for this build
tmpdir = 'tmp/' + variant + '/' + os.path.basename(molfiles)

import os
env = Environment()

env['ENV']['USER'] = os.environ['USER']
env['ENV']['HOME'] = os.environ['HOME']

# Mopac stuff
keys = 'keys.mopac_' + variant
keys_p1 = 'keys_p1.mopac_' + variant
keys_m1 = 'keys_m1.mopac_' + variant

# creating the charge files
file = open(keys,'r')
fileContents = file.readline()
file.close()
file = open(keys_p1,'w')
file.write('CHARGE=1 ' + fileContents)
file.close()
file = open(keys_m1,'w')
file.write('CHARGE=-1 ' + fileContents)
file.close()

mol2mop = Builder(action = 'babel -i mol $SOURCE -o mopin -xf ' + keys + ' $TARGET',
                     suffix = '.mop', single_source=True)
mol2mop_low = Builder(action = 'babel -i mol $SOURCE -o mopin -xf keys.mopac.low $TARGET',
                     suffix = '.low.mop', single_source=True)
mol2mop_p1 = Builder(action = 'babel -i mol $SOURCE -o mopin -xf ' + keys_p1 + ' $TARGET',
                     suffix = '.mop', single_source=True)
mol2mop_m1 = Builder(action = 'babel -i mol $SOURCE -o mopin -xf ' + keys_m1 + ' $TARGET',
                     suffix = '.mop', single_source=True)
mopac = Builder(action = 'mopac $SOURCE', suffix = '.cos', single_source=True)
mopacopt = Builder(action = 'mopac $SOURCE', suffix = '.optmop.out', single_source=True)
env.Append(BUILDERS = {'Mol2Mop' : mol2mop})
env.Append(BUILDERS = {'Mol2Mop_low' : mol2mop_low})
env.Append(BUILDERS = {'Mol2Mop_p1' : mol2mop_p1})
env.Append(BUILDERS = {'Mol2Mop_m1' : mol2mop_m1})
env.Append(BUILDERS = {'Mopac' : mopac})
env.Append(BUILDERS = {'MopacOpt' : mopacopt})

# Gamess stuff
babelgam = Builder(action = 'babel -i mol $SOURCE -o gamin -xf keys.gamess $TARGET',
                     suffix = '.inp', single_source=True)
babelgam_low = Builder(action = 'babel -i mol $SOURCE -o gamin -xf keys.gamess.low $TARGET',
                     suffix = 'low.inp', single_source=True)
babelgam_p1 = Builder(action = 'babel -i mol $SOURCE -o gamin -xf keys.gamess_p1 $TARGET',
                     suffix = '.inp', single_source=True)
babelgam_m1 = Builder(action = 'babel -i mol $SOURCE -o gamin -xf keys.gamess_m1 $TARGET',
                     suffix = '.inp', single_source=True)
babelgampcm = Builder(action = 'babel -i mol $SOURCE -o gamin -xf keys.gamess.pcm $TARGET',
                     suffix = '.pcm.inp', single_source=True)
babelgampcm_m1 = Builder(action = 'babel -i mol $SOURCE -o gamin -xf keys.gamess.pcm_m1 $TARGET',
                     suffix = '.pcm.inp', single_source=True)
babelgampcm_p1 = Builder(action = 'babel -i mol $SOURCE -o gamin -xf keys.gamess.pcm_p1 $TARGET',
                     suffix = '.pcm.inp', single_source=True)
# Gamess also produces a .dat file
def gamess_targets(target, source, env):
           target.append('$HOME/src/gamess07/$TARGET.dat')
           return target, source
gamess = Builder(action = os.environ['HOME'] + '/src/gamess07/rungms $SOURCE > $TARGET', suffix = '.gout',
	single_source=True) # , emitter = gamess_targets)
env.Append(BUILDERS = {'BabelGam' : babelgam})
env.Append(BUILDERS = {'BabelGam_low' : babelgam_low})
env.Append(BUILDERS = {'BabelGam_m1' : babelgam_m1})
env.Append(BUILDERS = {'BabelGam_p1' : babelgam_p1})
env.Append(BUILDERS = {'BabelGamPCM' : babelgampcm})
env.Append(BUILDERS = {'BabelGamPCM_m1' : babelgampcm_m1})
env.Append(BUILDERS = {'BabelGamPCM_p1' : babelgampcm_p1})
env.Append(BUILDERS = {'Gamess' : gamess})

# files
env.VariantDir(tmpdir, molfiles)
molfiles = Glob(tmpdir + '/*.mol')
files = []
files_p1 = []
files_m1 = []
for fi in molfiles :
	if str(fi).endswith("+1.mol") :
		files_p1.append(fi)
	elif str(fi).endswith("-1.mol") :
		files_m1.append(fi)
	else :
		files.append(fi)

# Build all files for Mopac
mops = env.Mol2Mop(files)
mops_p1 = env.Mol2Mop_p1(files_p1)
mops_m1 = env.Mol2Mop_m1(files_m1)
# dependencies on keys files
env.Depends(mops, keys)
env.Depends(mops_p1, keys_p1)
env.Depends(mops_m1, keys_m1)
allmops = mops
allmops += mops_p1
allmops += mops_m1
mopacBuild = env.Mopac(allmops)
env.Alias('mopac', mopacBuild)
env.Default('mopac')
env.Install(variant, mopacBuild)
env.Install(variant, files)
env.Install(variant, molfiles)

# Build all files for Gamess
# Delete all DAT files, otherwise gamess will stop
delAction = Delete(Glob(os.environ['HOME'] + '/src/gamess07/tmp/*.dat'))
Execute(delAction)

# Convert mol files to gamess input
inps = env.BabelGam(Glob('*.mol'))
#inps += env.BabelGam_low(Glob('*.mol'))
#inps += env.BabelGam(Glob('*.optmol'))
#inps += env.BabelGam_m1(Glob('*.mol-1'))
#inps += env.BabelGam_p1(Glob('*.mol+1'))
env.Depends(inps, 'keys.gamess')
# env.Depends(inps, delAction)
# process files with gamess
gamessBuild = env.Gamess(inps)
Alias('gamess', gamessBuild)

# Convert mol files to gamess input
inps = env.BabelGamPCM(Glob('*.mol'))
#inps += env.BabelGamPCM(Glob('*.optmol'))
inps += env.BabelGamPCM_p1(Glob('*.mol+1'))
inps += env.BabelGamPCM_m1(Glob('*.mol-1'))
env.Depends(inps, 'keys.gamess.pcm')
# env.Depends(inps, delAction)
# process files with gamess
gamessBuild = env.Gamess(inps)
Alias('gamesspcm', gamessBuild)

